// * VARIABLES
$nb__blob: 8;
$nb__sparkle: 10;

$ball__height: 90px;
$ball__width: 90px;

$blob__height: 50px;
$blob__width: 50px;

$sparkle__height: 8px;
$sparkle__width: 8px;

$blob__bg: #FFF;

// use only the available space inside the 400x400 frame
.frame {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 400px;
  height: 400px;
  margin-top: -200px;
  margin-left: -200px;
  border-radius: 2px;
  box-shadow: 4px 8px 16px 0 rgba(0, 0, 0, 0.1);
  overflow: hidden;
  background: #000000;
  color: #333;
  font-family: "Open Sans", Helvetica, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  filter: contrast(25);
}

.main__container {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

.ball {
    position: relative;
    height: $ball__height;
    width: $ball__width;
    background: $blob__bg;
    border-radius: 50%;
    filter: blur(15px);
}

.blob {
    position: absolute;
    background-color: $blob__bg;

    &::after {
        content: "";
        position: absolute;
        display: block;
        border-radius: 50%;
        background-color: $blob__bg;
    }
}

[class^="blob blob-"] {
    top: calc((#{$ball__height} - #{$blob__height}) / 2);
    left: calc((#{$ball__width} - #{$blob__width}) / 2);
    height: $blob__height;
    width: $blob__width;

    &::after {
        height: $blob__height;
        width: $blob__width;
    }
}

[class^="blob sparkle-"] {
    top: calc(#{$ball__height} / 2.3);
    left: calc(#{$ball__width} / 2.3);
}

@for $i from 1 through $nb__blob {
    .blob-#{$i} {
        transform: rotate(random(300) + deg);
    
        &::after {
            transform-origin: (40 - ($i * 3)) + px (40 - ($i * 3)) + px;
            animation: rotate (2.5 + calc($i * 2 / 10)) + s ease-in-out (0 + calc($i * 2 / 10)) + s infinite;
            filter: blur(5px);
        }
    }
}


@for $i from 1 through $nb__sparkle {
    .sparkle-#{$i} {
        transform: rotate(random(300) + deg);
        height: ($sparkle__height + $i);
        width: ($sparkle__width + $i);
    
        &::after {
            height: ($sparkle__height + $i);
            width: ($sparkle__width + $i);
            transform-origin: (60 - ($i * 2)) + px (60 - ($i * 2)) + px;
            animation: rotate (3.5 + calc($i * 2 / 10)) + s ease-in-out (0 + calc($i * 2 / 10)) + s infinite;
            filter: blur(3px);
        }
    }
}


// Animations
@keyframes rotate {
	from {
		transform: rotate(0deg) translate3d(0, 0, 0);
	}
	to {
		transform: rotate(360deg) translate3d(0, 0, 0);
	}
}
